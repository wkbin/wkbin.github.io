[{"title":"Android自定义绘图","url":"/2020/10/31/android-draw/","content":"\n\n## 完整代码\n\n```Kotlin\nimport android.content.Context\nimport android.graphics.*\nimport android.util.AttributeSet\nimport android.util.Log\nimport android.view.View\nimport androidx.core.content.ContextCompat\nimport androidx.core.graphics.withRotation\nimport androidx.core.graphics.withTranslation\nimport androidx.lifecycle.Lifecycle\nimport androidx.lifecycle.LifecycleObserver\nimport androidx.lifecycle.OnLifecycleEvent\nimport kotlinx.coroutines.*\nimport kotlin.math.PI\nimport kotlin.math.cos\nimport kotlin.math.sin\n\nclass MyView @JvmOverloads constructor(\n    context: Context, attrs: AttributeSet? = null, defStyleAttr: Int = 0\n) : View(context, attrs, defStyleAttr),LifecycleObserver {\n\n\n    private var sineWaveSamplesPath = Path()\n\n    private var rotatingJob : Job? = null\n\n    private var mWidth = 0f\n    private var mHeight = 0f\n    // 画布旋转角度\n    private var mAngle = 10f\n    // 圆的半径\n    private var mRadius = 0f\n    // 画实现的画笔\n    private val solidLinePaint = Paint().apply {\n        style = Paint.Style.STROKE\n        strokeWidth = 2f\n        color = ContextCompat.getColor(context,R.color.colorWhite)\n    }\n    // 画文字\n    private val textPaint = Paint().apply{\n        textSize = 30f\n        typeface = Typeface.DEFAULT_BOLD\n        color = ContextCompat.getColor(context,R.color.colorWhite)\n    }\n\n\n    // 画文字\n    private val textBFPaint = Paint().apply{\n        textSize = 50f\n        typeface = Typeface.DEFAULT_BOLD\n        color = ContextCompat.getColor(context,R.color.colorWhite)\n    }\n\n    // 画虚线\n    private val dashedLinePaint = Paint().apply {\n        style = Paint.Style.STROKE\n        // 线长10f，中断10f\n        pathEffect = DashPathEffect(floatArrayOf(10f,10f),0f)\n        // 线粗细\n        strokeWidth = 2f\n        color = ContextCompat.getColor(context,R.color.colorYellow)\n    }\n    // 画半径\n    private val radiusLinePaint = Paint().apply {\n        style = Paint.Style.STROKE\n        strokeWidth = 5f\n        color = ContextCompat.getColor(context,R.color.colorAccent)\n    }\n    // 画小白点\n    private val filledCirclePaint = Paint().apply {\n        style = Paint.Style.FILL\n        color = ContextCompat.getColor(context,R.color.colorWhite)\n    }\n\n    override fun onSizeChanged(w: Int, h: Int, oldw: Int, oldh: Int) {\n        super.onSizeChanged(w, h, oldw, oldh)\n        Log.d(\"hello\",\"onSizeChanged\")\n        mWidth = w.toFloat()\n        mHeight = h.toFloat()\n        mRadius = if (w<h/2) w/2.toFloat() else h/4.toFloat()\n        mRadius -= 20f\n    }\n\n    override fun onDraw(canvas: Canvas?) {\n        super.onDraw(canvas)\n        canvas?.apply {\n            drawAxises(this)\n            drawLabel(this)\n            drawDashedCircle(this)\n            drawVector(this)\n            drawProjections(this)\n            drawSineWave(this)\n        }\n    }\n    // 画坐标轴\n    private fun drawAxises(canvas:Canvas){\n        // 移动画布位置到中间\n        canvas.withTranslation(mWidth/2,mHeight/2) {\n            drawLine(-mWidth/2,0f,mWidth/2,0f,solidLinePaint)\n            drawLine(0f,-mHeight/2,0f,mHeight/2,solidLinePaint)\n\n        }\n    }\n    // 画虚线圆\n    private fun drawDashedCircle(canvas:Canvas){\n        // 移动到四分之三处\n        canvas.withTranslation(mWidth/2,mHeight/4*3) {\n            drawLine(-mWidth/2,0f,mWidth/2,0f,solidLinePaint)\n            drawCircle(0f,0f,mRadius,dashedLinePaint)\n        }\n    }\n    // 画文字\n    private fun drawLabel(canvas:Canvas){\n        canvas.apply {\n            drawText(\"指数函数与旋转矢量\",50f,mHeight-50f,textPaint)\n        }\n    }\n    // 画矢量半径\n    private fun drawVector(canvas:Canvas){\n        canvas.withTranslation(mWidth/2,mHeight/4*3) {\n            // 旋转画布\n            withRotation(-mAngle) {\n                drawLine(0f,0f,mRadius,0f,radiusLinePaint)\n            }\n        }\n    }\n\n    // 画小白点投影\n    private fun drawProjections(canvas: Canvas){\n        canvas.withTranslation(mWidth/2,mHeight/2) {\n            drawCircle(mRadius * cos(mAngle.toRadians()),0f,10f,filledCirclePaint)\n        }\n        canvas.withTranslation(mWidth/2,mHeight/4*3) {\n            drawCircle(mRadius * cos(mAngle.toRadians()),0f,10f,filledCirclePaint)\n        }\n        canvas.withTranslation(mWidth/2,mHeight/4*3) {\n            val x = mRadius * cos(mAngle.toRadians())\n            val y = mRadius * sin(mAngle.toRadians())\n            withTranslation(x ,-y) {\n                drawLine(0f,0f,0f,y,solidLinePaint)\n                drawLine(0f,0f,0f,-mHeight/4+y,dashedLinePaint)\n            }\n\n        }\n    }\n\n    // 画路径\n    private fun drawSineWave(canvas: Canvas){\n        canvas.withTranslation(mWidth/2,mHeight/2) {\n            val samplesCount = 100\n            val dy = mHeight / 2 /samplesCount\n            sineWaveSamplesPath.reset()\n            sineWaveSamplesPath.moveTo(mRadius * cos(mAngle.toRadians()),0f)\n            repeat(samplesCount){\n                val x = mRadius * cos(it*-0.15+mAngle.toRadians()).toFloat()\n                val y = -dy * it\n                // 沿着路径添加贝塞尔曲线\n                sineWaveSamplesPath.quadTo(x,y,x,y)\n\n            }\n            drawPath(sineWaveSamplesPath,radiusLinePaint)\n        }\n    }\n    // 启动\n    @OnLifecycleEvent(Lifecycle.Event.ON_RESUME)\n    fun startRotating(){\n        rotatingJob = CoroutineScope(Dispatchers.Main).launch {\n            while (true){\n                delay(100)\n                mAngle += 5f\n                invalidate()\n            }\n        }\n    }\n    // 暂停\n    @OnLifecycleEvent(Lifecycle.Event.ON_PAUSE)\n    fun pauseRotating(){\n        rotatingJob?.cancel()\n    }\n\n    // 角度转弧度扩展函数\n    private fun Float.toRadians() = this/180* PI.toFloat()\n}\n```","tags":["自定义View"],"categories":["Android"]},{"title":"Hello World","url":"/2020/10/27/hello-world/","content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n"}]