[{"title":"第一个小程序","url":"/2020/11/11/wxxcx/","content":"## [微信小程序介绍](https://developers.weixin.qq.com/miniprogram/introduction/)\n\n![](https://pic.downk.cc/item/5fab5a421cd1bbb86be939e9.png)\n\n微信⼩程序，简称[⼩程序](https://baike.baidu.com/item/小程序)，英⽂名 Mini Program ，是⼀种不需要下载安装即可使⽤的应⽤，它实现了应⽤“触⼿可及”的梦想，⽤⼾扫⼀扫或搜⼀下即可打开应⽤ \n\n<!-- more -->\n\n## 为什么学微信⼩程序？\n\n1.  微信有海量⽤⼾，⽽且粘性很⾼，在微信⾥开发产品更容易触达⽤⼾。\n2.  推⼴App 或公众号的成本太⾼。 \n3.  开发适配成本低。\n4.  容易⼩规模试错，然后快速迭代。\n5.  跨平台。\n\n## 微信⼩程序历史 \n\n- 2016年1⽉11⽇，微信之⽗张⼩⻰时隔多年的公开亮相，解读了微信的四⼤价值观。张⼩⻰指出， 越来越多产品通过公众号来做，因为这⾥开发、获取⽤⼾和传播成本更低。拆分出来的服务号并没有提供更好的服务，所以微信内部正在研究新的形态，叫**「微信⼩程序」** 需要注意的是，之前是叫 做 **应⽤号**\n- 2016年9⽉21⽇，微信⼩程序正式开启内测。在微信⽣态下，触⼿可及、⽤完即⾛的微信⼩程序引起⼴泛关注。腾讯云正式上线微信⼩程序解决⽅案，提供⼩程序在云端服务器的技术⽅案。\n- 2017年1⽉9⽇，微信推出的“⼩程序”正式上线。“⼩程序”是⼀种⽆需安装，即可使⽤的⼿机“应⽤”。不需要像往常⼀样下载App，⽤⼾在微信中“⽤完即⾛”。\n\n## 疯狂的微信⼩程序\n\n1. 微信⽉活已经达到10.82亿。其中55岁以上的⽤⼾也达到6300万 \n2. 信息传达数达到450亿，较去年增⻓18%;视频通话4.1亿次,增⻓100% \n3. ⼩程序覆盖超过200+⾏业，交易额增⻓超过6倍，服务1000亿+⼈次,创造出了5000亿+的商业价值\n\n## 还有其他的⼩程序 不容忽视\n\n1. ⽀付宝⼩程序\n\n2. 百度⼩程序 \n\n3.  QQ⼩程序 \n\n4. 今⽇头条 + 抖⾳⼩程序 \n\n   \n\n## 体验\n\n### 官⽅微信⼩程序体验 \n\n![](https://pic.downk.cc/item/5fab5a8f1cd1bbb86be948b7.png)\n\n[⼩程序⽰例源码](https://github.com/wechat-miniprogram/miniprogram-demo)\n\n\n\n### 其他优秀的第三⽅⼩程序 \n\n- 拼多多\n- 滴滴出⾏ \n- 欢乐⽃地主 \n- 智⾏⽕⻋票 \n- 唯品会\n\n## 环境准备 \n\n开发微信⼩程序之前，必须要准备好相应的环境 \n\n### 注册账号\n\n> 建议使用全新的邮箱，没有注册过其他小程序或者公众号的。  \n\n访问[注册⻚⾯](https://mp.weixin.qq.com/wxopen/waregister?action=step1)，耐⼼完成注册即可。  \n\n### 获取APPID  \n\n由于后期调⽤微信⼩程序的接⼝等功能，需要索取开发者的⼩程序中的 APPID APPID ，所以在注册成功后，可登录，然后获取APPID。  \n\n[登录](https://mp.weixin.qq.com/)，成功后可看到如下界⾯  \n\n然后复制你的APPID,悄悄的保存起来，不要给别⼈看到😄。  \n\n![](https://pic.downk.cc/item/5fab5f8d1cd1bbb86bea3359.png)\n\n![](https://pic.downk.cc/item/5fab5fb71cd1bbb86bea3ce2.png)\n\n### 开发⼯具  \n\n[下载地址](https://developers.weixin.qq.com/miniprogram/dev/devtools/download.html)  \n\n![](https://pic.downk.cc/item/5fab60271cd1bbb86bea5270.png)\n\n微信⼩程序⾃带开发者⼯具，集 **开发** **预览** **调试** **发布**于⼀⾝的完整环境。但是由于编码的体验不算好，因此 建议使⽤  vs code + 微信小程序编辑工具来实现编码，vs code 负责敲代码， 微信编辑工具 微信编辑工具负责预览  \n\n## 第⼀个微信⼩程序\n\n### 打开微信开发者⼯具  \n\n注意第⼀次登录的时候需要扫码登录 \n\n![](https://pic.downk.cc/item/5fab62911cd1bbb86beabdc6.png)\n\n### 新建小程序项目\n\n![](https://pic.downk.cc/item/5fab62f71cd1bbb86bead040.png)\n\n### 填写项⽬信息  \n\n![](https://pic.downk.cc/item/5fab63371cd1bbb86beadacc.png)\n\n### 成功\n\n![](https://pic.downk.cc/item/5fab60271cd1bbb86bea5270.png)\n\n## 微信开发者⼯具介绍  \n\n详细的使⽤，可以查看[官⽹](https://developers.weixin.qq.com/miniprogram/dev/devtools/devtools.html)  \n\n![](https://pic.downk.cc/item/5fab84aa1cd1bbb86bf2016c.png)\n\n## ⼩程序结构⽬录  \n\n⼩程序框架的⽬标是通过尽可能简单、⾼效的⽅式让开发者可以在微信中开发具有原⽣APP体验的服务。\n⼩程序框架提供了⾃⼰的视图层描述语⾔ WXML 和 WXSS ，以及 JavaScript ，并在视图层与逻\n辑层间提供了数据传输和事件系统，让开发者能够专注于数据与逻辑  \n\n\n| 结构 |  传统Web   | 微信小程序 |\n| :--: | :--------: | :--------: |\n| 结构 |    HTML    |    WXML    |\n| 样式 |    CSS     |    WXSS    |\n| 逻辑 | JavaScript | JavaScript |\n| 配置 |     无     |    JSON    |\n\n通过以上对⽐得出，传统web是三层结构。⽽微信⼩程序是四层结构，多了⼀层配置`.json`  \n\n### 基本的项目目录\n\n![](https://pic.downk.cc/item/5fab88d51cd1bbb86bf30fe6.png)\n\n## 小程序配置文件\n\n⼀个⼩程序应⽤程序会包括最基本的两种配置⽂件。⼀种是全局的**app.json**和 ⻚⾯⾃⼰的**page.sjon**\n\n> 注意：配置文件中不能出现注释\n\n### 全局配置app.json\n\n**app.json** 是当前⼩程序的全局配置，包括了⼩程序的所有⻚⾯路径、界⾯表现、⽹络超时时间、底部tab等。普通快速启动项⽬⾥边的  **app.json** 配置\n\n```Jso\n{\n\"pages\":[\n\"pages/index/index\",\n\"pages/logs/logs\"\n],\n\"window\":{\n\"backgroundTextStyle\":\"light\",\n\"navigationBarBackgroundColor\": \"#fff\",\n\"navigationBarTitleText\": \"WeChat\",\n\"navigationBarTextStyle\":\"black\"\n}\n}\n```\n\n字段的含义  \n\n1. pages 字段 —— 用于描述当前小程序所有页面路径，这是为了让微信客服知道当前你的小程序页面定义再哪个目录。\n2. window 字段 —— 定义小程序所有页面的顶部背景颜色，文字颜色定义等。\n3. 完整的配置信息请参考 [app.json配置](https://developers.weixin.qq.com/miniprogram/dev/reference/configuration/app.html)\n\n### Tabbar\n\n![](https://pic.downk.cc/item/5fab8f331cd1bbb86bf4da86.png)\n\n### 页面配置 page.json\n\n这里的`page.json`其实用来表示页面目录下的`page.json`这类和⼩程序⻚⾯相关的配置。\n\n开发者可以独⽴定义每个⻚⾯的⼀些属性，如顶部颜⾊、是否允许下拉刷新等等。\n\n页面的配置只能设置app.json中部分window配置项的内容，页面中配置项会覆盖app.json的window中相同的配置项。\n\n|             属性             |   类型   | 默认值  |                             描述                             |\n| :--------------------------: | :------: | :-----: | :----------------------------------------------------------: |\n| navigationBarBackgroundColor | HexColor | #000000 |                  导航栏背景颜⾊，如#000000                   |\n|    navigationBarTextStyle    |  String  |  white  |              导航栏标题颜⾊，仅⽀持black /white              |\n|    navigationBarTitleText    |  String  |         |                      导航栏标题⽂字内容                      |\n|       backgroundColor        | HexColor | #FFFFFF |                         窗⼝的背景⾊                         |\n|     backgroundTextStyle      |  String  |  dark   |            下拉loading的样式，仅⽀持 dark / light            |\n|    enablePullDownRefresh     | Boolean  |  false  | 是否全局开启下拉刷新。详⻅[Page.onPullDownRefresh](https://developers.weixin.qq.com/miniprogram/dev/framework/app-service/page.html#onpulldownrefresh) |\n|    onReachBottomDistance     |  Number  |   50    | ⻚⾯上拉触底事件触发时距⻚⾯底部距离，单位为px。详⻅ [Page.onReachBottom](https://developers.weixin.qq.com/miniprogram/dev/framework/app-service/page.html#onreachbottom) |\n|        disableScroll         | Boolean  |  false  | 设置为 true 则⻚⾯整体不能上下滚动；只在⻚⾯配置中有 效，⽆法在app.json中设置该项 |\n\n### SiteMap配置-了解即可  \n\n⼩程序根⽬录下的**sitemap.json**⽂件⽤于配置⼩程序及其⻚⾯是否允许被微信索引。\n\n### 模板语法\n\nWXML（WeiXin Markup Language）是框架设计的⼀套标签语⾔，结合[基础组件](https://developers.weixin.qq.com/miniprogram/dev/component/index.html)、[事件系统](https://developers.weixin.qq.com/miniprogram/dev/framework/view/wxml/event.html)，可以构\n建出⻚⾯的结构。  \n\n### 数据绑定\n\n#### 普通写法\n\n```xml\n<view> {{ message }} </view>\n```\n\n```json\nPage({\n  data: {\n    message: 'Hello MINA!'\n }\n})\n```\n\n#### 组件属性\n\n```xml\n<view id=\"item-{{id}}\"> </view>\n```\n\n```json\nPage({\n  data: {\n    id: 0\n }\n})\n```\n\n#### bool类型\n\n不要直接写checked= false ，其计算结果是⼀个字符串  \n\n```xml\n<checkbox checked=\"{{false}}\"> </checkbox>\n```\n\n### 运算\n\n#### 三元运算\n\n```xml\n<view hidden=\"{{flag ? true : false}}\"> Hidden </view>\n```\n\n#### 算数运算\n\n```xml\n<view> {{a + b}} + {{c}} + d </view>\n```\n\n```json\nPage({\n  data: {\n    a: 1,\n    b: 2,\n    c: 3\n }\n})\n```\n\n#### 逻辑判断\n\n```xml\n<view wx:if=\"{{length > 5}}\"> </view>\n```\n\n#### 字符串运算\n\n```xml\n<view>{{\"hello\" + name}}</view>\n```\n\n```json\nPage({\n  data:{\n    name: 'MINA'\n }\n})\n```\n\n#### 注意\n\n花括号和引号之间如果有空格，将最终被解析成为字符串  \n\n## 列表渲染\n\n### wx:for\n\n项的变量名默认为 `item` `wx:for-item` 可以指定数组当前元素的变量名 \n\n下标变量名默认为 `index` `wx-for-index` 可以指定数组当前下标的变量名\n\n`wx:key` ⽤来提⾼数组渲染的性能\n\n`wx:key` 绑定的值 有如下选择 \n\n1. `string` 类型，表⽰ 循环项中的唯⼀属性 如 \n\n   ```json\n   list:[{id:0,name:\"炒饭\"},{id:1,name:\"炒面\"}]\n   wx:key=\"id\"\n   ```\n\n2. 保留字`*this` ，它的意思是`item` 本⾝ ，*this 代表的必须是 唯⼀的字符串和数组\n\n   ```json\n   list:[1,2,3,4,5]\n   wx:key=\"*this\"\n   ```\n\n**代码：** \n\n```xml\n<view wx:for=\"{{array}}\" wx:key=\"id\">\n {{index}}: {{item.message}}\n</view>\n```\n\n```json\nPage({\n  data: {\n    array: [{\n      id:0,\n      message: 'foo',\n   }, {\n      id:1,\n      message: 'bar'\n   }]\n }\n})\n```\n\n### block\n\n渲染⼀个包含多节点的结构块 block最终不会变成真正的dom元素 \n\n```xml\n<block wx:for=\"{{[1, 2, 3]}}\" wx:key=\"*this\" >\n  <view> {{index}}: </view>\n  <view> {{item}} </view>\n</block>\n```\n\n## 条件渲染\n\n### wx:if\n\n在框架中，使⽤`wx:if=\"{{condition}}\"` 来判断是否需要渲染该代码块： \n\n```xml\n  <view wx:if=\"{{false}}\">1</view>\n  <view wx:elif=\"{{true}}\">2</view>\n  <view wx:else>3</view>\n```\n\n### hidden\n\n```xml\n<view hidden=\"{{condition}}\"> True </view>\n```\n\n类似 `wx:if`\n\n频繁切换 ⽤`hidden`\n\n不常使⽤ ⽤`wx:if`\n\n## 小程序事件的绑定\n\n⼩程序中绑定事件，通过bind关键字来实现。如`bindtap` `bindinput` `bindchange` 等 \n\n不同的组件⽀持不同的事件，具体看组件的说明即可。 \n\n### wxml\n\n```xml\n<input bindinput=\"handleInput\" />\n```\n\n### page\n\n```javascript\nPage({\n  // 绑定的事件\n  handleInput: function(e) {\n    console.log(e);\n    console.log(\"值被改变了\");\n }\n})\n```\n\n### 特别注意\n\n1. 绑定事件时不能带参数 不能带括号 以下为错误写法\n\n   ```html\n   <input bindinput=\"handleInput(100)\" />\n   ```\n\n2. 事件传值 通过标签⾃定义属性的⽅式 和`value` \n\n   ```html\n   <input bindinput=\"handleInput\" data-item=\"100\" />\n   ```\n\n3. 事件触发时获取数据 \n\n   ```javascript\n    handleInput: function(e) {\n       // {item:100}\n      console.log(e.currentTarget.dataset)\n       // 输入框的值\n      console.log(e.detail.value);\n    }\n   ```\n\n\n## 样式WXSS\n\nWXSS( `WeiXin Style Sheets` )是⼀套样式语⾔，⽤于描述 WXML的组件样式。 \n\n与 CSS 相⽐，WXSS 扩展的特性有： \n\n- 响应式⻓度单位`rpx` \n- 样式导⼊ \n\n### 尺寸单位\n\n`rpx` （responsive pixel）: 可以根据屏幕宽度进⾏⾃适应。规定屏幕宽为 750rpx。如在 `iPhone6` 上，屏幕宽度为 375px \n\n，共有750个物理像素，则 `750rpx = 375px = 750物理像素` ，`1rpx = 0.5px = 1物理像素` 。\n\n| 设备         | rpx换算px (屏幕宽度/750) | px换算rpx (750/屏幕宽度) |\n| ------------ | ------------------------ | ------------------------ |\n| iPhone5      | 1rpx = 0.42px            | 1px = 2.34rpx            |\n| iPhone6      | 1rpx = 0.5px             | 1px = 2rpx               |\n| iPhone6 Plus | 1rpx = 0.552px           | 1px = 1.81rpx            |\n\n建议： 开发微信⼩程序时设计师可以⽤ iPhone6 作为视觉稿的标准。 \n\n使⽤步骤： \n\n1. 确定设计稿宽度 pageWidth \n2.  计算⽐例 `750rpx = pageWidth px` ，因此 `1px=750rpx/pageWidth` 。\n3. 在less⽂件中，只要把设计稿中的 `px` => `750/pageWidth rpx` 即可。 \n\n### 样式导⼊ \n\nwxss中直接就⽀持，样式导⼊功能。 \n\n也可以和 less中的导⼊混⽤。 \n\n使⽤ `@import` 语句可以导⼊外联样式表，只⽀持**相对路径**。 \n\n**⽰例代码：** \n\n```css\n/** common.wxss **/\n.small-p {\n  padding:5px; }\n```\n\n```css\n/** app.wxss **/\n@import \"common.wxss\";\n.middle-p {\n  padding:15px; }\n```\n\n### 选择器\n\n特别需要注意的是 ⼩程序 不⽀持通配符 `*` 因此以下代码⽆效！ \n\n```css\n*{\n    margin:0;\n    padding:0;\n    box-sizing:border-box; \n}\n```\n\n⽬前⽀持的选择器有：\n\n| 选择器           | 样例              | 样例描述                                       |\n| ---------------- | ----------------- | ---------------------------------------------- |\n| .class           | .intro            | 选择所有拥有 class=\"\fintro\"\f 的组件              |\n| \\#id             | \\#firstname       | 选择拥有 id=\f\"firstname\f\" 的组件                 |\n| element          | view              | 选择所有 view 组件                             |\n| element, element | view, checkbox    | 选择所有⽂档的 view 组件和所有的 checkbox 组件 |\n| nth-child(n)     | view:nth-child(n) | 选择某个索引的标签                             |\n| ::after          | view::after       | 在 view 组件后边插⼊内容                       |\n| ::before         | view::before      | 在 view 组件前边插⼊内容                       |\n\n### 小程序中使用less\n\n原⽣⼩程序不⽀持 `less` ，其他基于⼩程序的框架⼤体都⽀持，如 `wepy` `mpvue` `taro` 等。 \n\n但是仅仅因为⼀个less功能，⽽去引⼊⼀个框架，肯定是不可取的。因此可以⽤以下⽅式来实现 \n\n1. 编辑器是 `vscode` \n\n2. 安装插件 `easy less` \n\n   ![](https://pic.downk.cc/item/5facf23b1cd1bbb86b4d91e4.png)\n\n3. 在vs code的设置中加⼊如下，配置 \n\n   ```json\n      \"less.compile\": {\n           \"outExt\":       \".wxss\"\n      }\n   ```\n\n4.  在要编写样式的地⽅，新建 `less` ⽂件，如 `index.less` ，然后正常编辑即可。\n\n## 常⻅组件\n\n重点讲解⼩程序中常⽤的布局组件\n\n### view\n\n代替 原来的 `div` 标签\n\n```xml\n <view hover-class=\"h-class\">\n 点击我试试\n  </view>\n```\n\n### text\n\n1. ⽂本标签 \n2. 只能嵌套text\n3. ⻓按⽂字可以复制（只有该标签有这个功能） \n4. 可以对空格 回⻋ 进⾏编码 \n\n| 属性名     | 类型    | 默认值 | 说明         |\n| ---------- | ------- | ------ | ------------ |\n| selectable | Boolean | false  | ⽂本是否可选 |\n| Boolean    | Boolean | false  | 是否解码     |\n\n#### 代码 \n\n```xml\n <text selectable=\"{{false}}\" decode=\"{{false}}\">\n   普&nbsp;通\n  </text>\n```\n\n### image\n\n1.  图⽚标签，image组件默认宽度320px、⾼度240px \n2. ⽀持懒加载\n\n| 属性名    | 类型    | 默认值        | 说明                 |\n| --------- | ------- | ------------- | -------------------- |\n| src       | String  |               | 图⽚资源地址         |\n| mode      | String  | 'scaleToFill' | 图⽚裁剪、缩放的模式 |\n| lazy-load | Boolean | false         | 图⽚懒加载           |\n\n**mode 有效值：** \n\nmode 有 13 种模式，其中 4 种是缩放模式，9种是裁剪模式。\n\n| 模式 | 值           | 说明                                                       |\n| ---- | ------------ | ---------------------------------------------------------- |\n| 缩放 | scaleToFill  | 不保持纵横⽐缩放图⽚，使图⽚的宽⾼完全拉伸⾄填满\u0001image 元素 |\n| 缩放 | aspectFit    | 保持纵横⽐缩放图⽚，使图⽚的⻓边能完全显⽰出来。           |\n| 缩放 | aspectFill   | 保持纵横⽐缩放图⽚，只保证图⽚的短边能完全显⽰出来。       |\n| 缩放 | widthFix     | 宽度不变，⾼度⾃动变化，保持原图宽⾼⽐不变                 |\n| 裁剪 | top          | 不缩放图⽚，只显⽰图⽚的顶部区域                           |\n| 裁剪 | bottom       | 不缩放图⽚，只显⽰图⽚的底部区域                           |\n| 裁剪 | center       | 不缩放图⽚，只显⽰图⽚的中间区域                           |\n| 裁剪 | left         | 不缩放图⽚，只显⽰图⽚的左边区域                           |\n| 裁剪 | right        | 不缩放图⽚，只显⽰图⽚的右边区域                           |\n| 裁剪 | top left     | 不缩放图⽚，只显⽰图⽚的左上边区域                         |\n| 裁剪 | top right    | 不缩放图⽚，只显⽰图⽚的右上边区域                         |\n| 裁剪 | bottom left  | 不缩放图⽚，只显⽰图⽚的左下边区域                         |\n| 裁剪 | bottom right | 不缩放图⽚，只显⽰图⽚的右下边区域                         |\n\n### swiper\n\n> 微信内置轮播图组件\n\n![](https://pic.downk.cc/item/5fae45631cd1bbb86b9630eb.png)\n\n默认宽度 100% ⾼度 150px \n\n| 属性名                 | 类型    | 默认值            | 说明                 |\n| ---------------------- | ------- | ----------------- | -------------------- |\n| indicator-dots         | Boolean | false             | 是否显⽰⾯板指⽰点   |\n| indicator-color        | Color   | rgba(0, 0, 0, .3) | 指⽰点颜⾊           |\n| indicator-active-color | Color   | \\#000000          | 当前选中的指⽰点颜⾊ |\n| autoplay               | Boolean | false             | 是否⾃动切换         |\n| interval               | Number  | 5000              | ⾃动切换时间间隔     |\n| circular               | Boolean | false             | 是否循环轮播         |\n\n### swiper\n\n滑块视图容器。\n\n### swiper-item\n\n> 滑块\n\n**默认宽度和⾼度都是100%**\n\n### navigator\n\n> 导航组件 类似超链接标签\n\n| 属性名    | 类型   | 默认值   | 说明                                                         |\n| --------- | ------ | -------- | ------------------------------------------------------------ |\n| target    | String | self     | 在哪个⽬标上发⽣跳转，默认当前⼩程序，可选值 self/miniProgram |\n| url       | String |          | 当前⼩程序内的跳转链接                                       |\n| open-type | String | navigate | 跳转⽅式                                                     |\n\n**open-type 有效值：**\n\n| 值           | 说明                                                         |\n| ------------ | ------------------------------------------------------------ |\n| navigate     | 保留当前⻚⾯，跳转到应⽤内的某个⻚⾯，但是不能跳到tabbar ⻚⾯ |\n| redirect     | 关闭当前⻚⾯，跳转到应⽤内的某个⻚⾯，但是不允许跳转到tabbar ⻚⾯。 |\n| switchTab    | 跳转到 tabBar ⻚⾯，并关闭其他所有⾮ tabBar ⻚⾯             |\n| reLaunch     | 关闭所有⻚⾯，打开到应⽤内的某个⻚⾯                         |\n| navigateBack | 关闭当前⻚⾯，返回上⼀⻚⾯或多级⻚⾯。可通过 getCurrentPages() 获取当前的⻚⾯栈，决定需要返回⼏层 |\n| exit         | 退出⼩程序，target=\fminiProgram\f时⽣效                         |\n\n### rich-text\n\n> 富文本标签\n\n可以将字符串解析成 对应标签，类似 vue中 `v-html` 功能\n\n![](https://pic.downk.cc/item/5fae48b21cd1bbb86b96feb5.png)\n\n**代码**\n\n```xml\n// 1   index.wxml 加载 节点数组 <rich-text nodes=\"{{nodes}}\" bindtap=\"tap\"></rich-text>\n// 2 加载 字符串 <rich-text nodes='<img\nsrc=\"https://developers.weixin.qq.com/miniprogram/assets/images/head_global_z_@all.p\nng\" alt=\"\">'></rich-text>\n    \n// index.js\n    \nPage({\n  data: {\n    nodes: [{\n      name: 'div',\n      attrs: {\n        class: 'div_class',\n        style: 'line-height: 60px; color: red;'\n     },\n      children: [{\n        type: 'text',\n        text: 'Hello&nbsp;World!'\n     }]\n   }]\n },\n  tap() {\n    console.log('tap')\n }\n})\n```\n\n### nodes属性\n\n`nodes` 属性支持 `字符串` 和 `标签节点数组` \n\n| 属性     | 说明       | 类型   | 必填 | 备注                                     |\n| -------- | ---------- | ------ | ---- | ---------------------------------------- |\n| name     | 标签名     | string | 是   | ⽀持部分受信任的 HTML 节点               |\n| attrs    | 属性       | object | 否   | ⽀持部分受信任的属性，遵循 Pascal 命名法 |\n| children | ⼦节点列表 | array  | 否   | 结构和 nodes ⼀致                        |\n\n**⽂本节点：type = text**\n\n| 属性 | 说明 | 类型   | 必填 | 备注         |\n| ---- | ---- | ------ | ---- | ------------ |\n| text | ⽂本 | string | 是   | ⽀持entities |\n\n- `nodes`不推荐使用 `String` 类型，性能会有所下降。\n- `rich-text` 组件内屏蔽所有节点的事件。\n- `attrs` 属性不⽀持 id ，⽀持 class 。\n- `name` 属性⼤⼩写不敏感。 \n- 如果使⽤了不受信任的 `HTML` 节点，该节点及其所有⼦节点将会被移除。\n- `img` 标签仅⽀持⽹络图⽚。 \n\n### button\n\n![](https://pic.downk.cc/item/5fae4a901cd1bbb86b977d1a.png)\n\n```xml\n<button\n  type=\"default\"\n  size=\"{{defaultSize}}\"\n  loading=\"{{loading}}\"\n  plain=\"{{plain}}\">\n default\n</button>\n```\n\n| 属性      | 类型    | 默认值  | 必填 | 说明                                                   |\n| --------- | ------- | ------- | ---- | ------------------------------------------------------ |\n| size      | string  | default | 否   | 按钮的⼤⼩                                             |\n| type      | string  | default | 否   | 按钮的样式类型                                         |\n| plain     | boolean | false   | 否   | 按钮的样式类型                                         |\n| disabled  | boolean | false   | 否   | 是否禁⽤                                               |\n| loading   | boolean | false   | 否   | 名称前是否带 loading 图标                              |\n| form-type | string  |         | 否   | ⽤于`` 组件，点击分别会触发 `` 组件的submit/reset 事件 |\n| open-type | string  |         | 否   | 微信开放能⼒                                           |\n\n**size 的合法值** \n\n| 值      | 说明     |\n| ------- | -------- |\n| default | 默认⼤⼩ |\n| mini    | ⼩尺⼨   |\n\n**type 的合法值** \n\n| 值      | 说明 |\n| ------- | ---- |\n| primary | 绿⾊ |\n| default | ⽩⾊ |\n| warn    | 红⾊ |\n\n**form-type 的合法值**\n\n| 值     | 说明     |\n| ------ | -------- |\n| submit | 提交表单 |\n| reset  | 重置表单 |\n\n**open-type 的合法值**\n\n| 值             | 说明                                                         |\n| -------------- | ------------------------------------------------------------ |\n| contact        | 打开客服会话，如果⽤⼾在会话中点击消息卡⽚后返回⼩程序，可以从bindcontact 回调中获得具体信息，[具体说明](https://developers.weixin.qq.com/miniprogram/dev/framework/open-ability/customer-message/customer-message.html) |\n| share          | 触发⽤⼾转发，使⽤前建议先阅读[使⽤指引](https://developers.weixin.qq.com/miniprogram/dev/framework/open-ability/share.html#使用指引) |\n| getPhoneNumber | 获取⽤⼾⼿机号，可以从bindgetphonenumber回调中获取到⽤⼾信息， [具体说明](https://developers.weixin.qq.com/miniprogram/dev/framework/open-ability/getPhoneNumber.html) |\n| getUserInfo    | 获取⽤⼾信息，可以从bindgetuserinfo回调中获取到⽤⼾信息      |\n| launchApp      | 打开APP，可以通过app-parameter属性设定向APP传的参数[具体说明](https://developers.weixin.qq.com/miniprogram/dev/framework/open-ability/launchApp.html) |\n| openSetting    | 打开授权设置⻚                                               |\n| feedback       | 打开“意⻅反馈”⻚⾯，⽤⼾可提交反馈内容并上传[⽇志](https://developers.weixin.qq.com/miniprogram/dev/api/wx.getLogManager.html)，开发者可以登录[⼩程序管理后台](https://mp.weixin.qq.com/)后进⼊左侧菜单“客服反馈”⻚⾯获取到反馈内容 |\n\n**open-type 的 contact的实现流程**\n\n1.  将⼩程序 的 `appid`  由测试号改为 ⾃⼰的 `appid`\n\n2. 登录[微信⼩程序官⽹](https://mp.weixin.qq.com/)，添加 `客服 - 微信` \n\n3. 为了⽅便演⽰，⽼师⾃⼰准备了两个账号\n\n   a.普通⽤⼾ A \n\n   b.客服-微信 B \n\n4. 就是⼲！ \n\n### icon\n\n| 属性  | 类型          | 默认值 | 必填 | 说明                                                         |\n| ----- | ------------- | ------ | ---- | ------------------------------------------------------------ |\n| type  | string        |        | 是   | icon的类型，有效值：success, success_no_circle,info, warn, waiting, cancel, download, search,clear |\n| size  | number/string | 23     | 否   | icon的⼤⼩                                                   |\n| color | string        |        | 否   | icon的颜⾊，同css的color                                     |\n\n![](https://pic.downk.cc/item/5fae4ff11cd1bbb86b99317a.png)\n\n**代码:** \n\n**js**\n\n```javascript\nPage({\n  data: {\n    iconSize: [20, 30, 40, 50, 60, 70],\n    iconType: [\n      'success', 'success_no_circle', 'info', 'warn', 'waiting', 'cancel',\n'download', 'search', 'clear'\n   ],\n    iconColor: [\n      'red', 'orange', 'yellow', 'green', 'rgb(0,255,255)', 'blue', 'purple'\n   ],\n }\n})\n```\n\n**wxml** \n\n```xml\n<view class=\"group\">\n  <block wx:for=\"{{iconSize}}\">\n    <icon type=\"success\" size=\"{{item}}\"/>\n  </block>\n</view> <view class=\"group\">\n  <block wx:for=\"{{iconType}}\">\n    <icon type=\"{{item}}\" size=\"40\"/>\n  </block>\n</view> <view class=\"group\">\n  <block wx:for=\"{{iconColor}}\">\n    <icon type=\"success\" size=\"40\" color=\"{{item}}\"/>\n  </block>\n</view>\n```\n\n### radio\n\n> 可以通过 color属性来修改颜色\n\n![](https://pic.downk.cc/item/5fae50ad1cd1bbb86b995dc1.png)\n\n需要搭配 [radio-group](https://developers.weixin.qq.com/miniprogram/dev/component/radio-group.html) ⼀起使⽤ \n\n### checkbox\n\n> 可以通过 color属性来修改颜色\n\n![](https://pic.downk.cc/item/5fae50f61cd1bbb86b996ef6.png)\n\n需要搭配 [checkbox-group](https://developers.weixin.qq.com/miniprogram/dev/component/checkbox-group.html) ⼀起使⽤ \n\n## ⾃定义组件\n\n> 类似vue或者react中的自定义组件\n\n⼩程序允许我们使⽤⾃定义组件的⽅式来构建⻚⾯。 \n\n### 创建⾃定义组件\n\n> 类似于页面，一个自定义组件由 `json` `wxml` `wxss` `js` 4个文件组成\n\n可以在微信开发者⼯具中快速创建组件的⽂件结构 \n\n![](https://pic.downk.cc/item/5fae519c1cd1bbb86b999e2c.png)\n\n在⽂件夹内 `components/myHeader ` ，创建组件 名为 `myHeader` \n\n![](https://pic.downk.cc/item/5fae51e61cd1bbb86b99b7ba.png)\n\n#### 声明组件 \n\n⾸先需要在组件的 `json` ⽂件中进⾏⾃定义组件声明 `myHeader.json`\n\n```json\n{\n  \"component\": true\n}\n```\n\n#### 编辑组件 \n\n同时，还要在组件的 `wxml`  ⽂件中编写组件模板，在 `wxss` ⽂件中加⼊组件样式 `slot` 表⽰插槽，类似vue中的slot `myHeader.wxml` \n\n```xml\n<!-- 这是自定义组件的内部WXML结构 -->\n<view class=\"inner\">\n {{innerText}}\n    <slot></slot>\n</view>\n```\n\n在组件的 `wxss` ⽂件中编写样式\n\n> 注意：在组件wxss中不应使用ID选择器、属性选择器和标签名选择器。\n\n`myHeader.wxss`\n\n```css\n/* 这里的样式只应用于这个自定义组件 */\n.inner {\n  color: red; \n}\n```\n\n#### 注册组件\n\n在组件的 `js` ⽂件中，需要使⽤ `Component()` 来注册组件，并提供组件的属性定义、内部数据和 ⾃定义⽅法\n\n`myHeader.js`\n\n```js\nComponent({\n  properties: {\n    // 这里定义了innerText属性，属性值可以在组件使用时指定\n    innerText: {\n      // 期望要的数据是 string类型\n      type: String,\n      value: 'default value',\n   }\n },\n  data: {\n    // 这里是一些组件内部数据\n    someData: {}\n },\n  methods: {\n    // 这里是一个自定义方法\n    customMethod: function(){}\n }\n})\n```\n\n### 声明引⼊⾃定义组件 \n\n⾸先要在⻚⾯的 `json` ⽂件中进⾏引⽤声明。还要提供对应的组件名和组件路径\n\n`index.wxml` \n\n```json\n{\n // 引用声明\n  \"usingComponents\": {\n // 要使用的组件的名称     // 组件的路径\n    \"my-header\":\"/components/myHeader/myHeader\"\n }\n}\n```\n\n### ⻚⾯中使⽤⾃定义组件 \n\n```xml\n<view>\n  <!-- 以下是对一个自定义组件的引用 -->\n  <my-header inner-text=\"Some text\">\n    <view>用来替代slot的</view>\n    </my-header>\n</view>\n```\n\n### 其他属性\n\n### 定义段与⽰例⽅法\n\n`Component` 构造器可⽤于定义组件，调⽤ `Component` 构造器时可以指定组件的属性、数据、⽅法等。\n\n| 定义段     | 类型       | 是否必填 | 描述                                                         |\n| ---------- | ---------- | -------- | ------------------------------------------------------------ |\n| properties | Object Map | 否       | 组件的对外属性，是属性名到属性设置的映射表，参⻅下⽂         |\n| data       | Object     | 否       | 组件的内部数据，和 `properties` ⼀同⽤于组件的模板渲染       |\n| observers  | Object     | 否       | 组件数据字段监听器，⽤于监听 properties 和 data 的变化，参⻅ [数据监听器](https://developers.weixin.qq.com/miniprogram/dev/framework/custom-component/observer.html) |\n| methods    | Object     | 否       | 组件的⽅法，包括事件响应函数和任意的⾃定义⽅法，关于事件响应函数的使⽤，参⻅ [组件事件](https://developers.weixin.qq.com/miniprogram/dev/framework/custom-component/events.html) |\n| created    | Function   | 否       | 组件⽣命周期函数，在组件实例刚刚被创建时执⾏，注意此时不能调⽤ `setData` ，参⻅ [组件⽣命周期](https://developers.weixin.qq.com/miniprogram/dev/framework/custom-component/lifetimes.html) |\n| attached   | Function   | 否       | 组件⽣命周期函数，在组件实例被移动到节点树另⼀个位置时执⾏，参⻅ [组件⽣命周期](https://developers.weixin.qq.com/miniprogram/dev/framework/custom-component/lifetimes.html) |\n| ready      | Function   | 否       | 组件⽣命周期函数，在组件布局完成后执⾏，参⻅ 组件⽣命周期    |\n| moved      | Function   | 否       | 组件⽣命周期函数，在组件实例被移动到节点树另⼀个位置时执⾏，参⻅ 组件⽣命周期 |\n| detached   | Function   | 否       | 组件⽣命周期函数，在组件实例被从⻚⾯节点树移除时执⾏，参⻅ [组件⽣命周期](https://developers.weixin.qq.com/miniprogram/dev/framework/custom-component/lifetimes.html) |\n\n### 组件-⾃定义组件传参\n\n1. ⽗组件通过**属性**的⽅式给⼦组件传递参数 \n2. ⼦组件通过**事件**的⽅式向⽗组件传递参数 \n\n#### 过程 \n\n1. **⽗组件** 把数据 `{{tabs}}` 传递到 ⼦组件的 `tabItems` 属性中 \n\n2. **⽗组件** 监听 `onMyTab` 事件\n\n3. **⼦组件** 触发 `bindmytap` 中的 `mytap` 事件\n\n   ⾃定义组件触发事件时，需要使⽤ `triggerEvent `  ⽅法，指定 `事件名` 、`detail` 对象\n\n4. ⽗ -> ⼦ 动态传值 `this.selectComponent(\"#tabs\");` \n\n**⽗组件代码** \n\n```html\n// page.wxml\n<tabs tabItems=\"{{tabs}}\" bindmytap=\"onMyTab\" >\n 内容-这里可以放插槽\n</tabs>\n// page.js\n  data: {\n    tabs:[\n     {name:\"体验问题\"},\n     {name:\"商品、商家投诉\"}\n   ]\n },\n  onMyTab(e){\n    console.log(e.detail);\n },\n```\n\n**⼦组件代码** \n\n```xml\n// com.wxml\n<view class=\"tabs\">\n  <view class=\"tab_title\"  >\n    <block  wx:for=\"{{tabItems}}\" wx:key=\"{{item}}\">\n      <view bindtap=\"handleItemActive\" data-index=\"{{index}}\">{{item.name}}</view>\n    </block>\n  </view>\n  <view class=\"tab_content\">\n    <slot></slot>\n  </view>\n</view>\n// com.js\nComponent({\n  properties: {\n    tabItems:{\n      type:Array,\n      value:[]\n   }\n },\n  /**\n   * 组件的初始数据\n   */\n  data: {\n },\n  /**\n   * 组件的方法列表\n   */\n  methods: {\n    handleItemActive(e){\n      this.triggerEvent('mytap','haha');\n   }\n }\n})\n```\n\n### 小结\n\n1. 标签名 是 中划线的⽅式 \n\n2.  属性的⽅式 也是要中划线的⽅式 \n\n3. 其他情况可以使⽤驼峰命名\n\n   a.组件的⽂件名如 `myHeader.js` 的等 \n\n   b. 组件内的要接收的属性名 如 `innerText` \n\n4. [更多。。](https://developers.weixin.qq.com/miniprogram/dev/framework/custom-component/component.html)\n\n##  ⼩程序⽣命周期\n\n分为**应⽤⽣命周期**和**⻚⾯⽣命周期**\n\n> 关于小程序前后台的定义和小程序的运行机制，请参考[运行机制](https://developers.weixin.qq.com/miniprogram/dev/framework/operating-mechanism.html)章节。\n\n### 应⽤⽣命周期 \n\n| 属性           | 类型     | 默认值 | 必填 | 说明                     |\n| -------------- | -------- | ------ | ---- | ------------------------ |\n| onLaunch       | function |        | 否   | 监听⼩程序初始化。       |\n| onShow         | function |        | 否   | 监听⼩程序启动或切前台。 |\n| onHide         | function |        | 否   | 监听⼩程序切后台。       |\n| onError        | function |        | 否   | 错误监听函数。           |\n| onPageNotFound | function |        | 否   | ⻚⾯不存在监听函数。     |\n\n### ⻚⾯⽣命周期 \n\n| 属性              | 类型     | 说明                                      |\n| ----------------- | -------- | ----------------------------------------- |\n| data              | Object   | ⻚⾯的初始数据                            |\n| onLoad            | function | ⽣命周期回调—监听⻚⾯加载                 |\n| onShow            | function | ⽣命周期回调—监听⻚⾯显⽰                 |\n| onReady           | function | ⽣命周期回调—监听⻚⾯初次渲染完成         |\n| onHide            | function | ⽣命周期回调—监听⻚⾯隐藏                 |\n| onUnload          | function | ⽣命周期回调—监听⻚⾯卸载                 |\n| onPullDownRefresh | function | 监听⽤⼾下拉动作                          |\n| onReachBottom     | function | ⻚⾯上拉触底事件的处理函数                |\n| onShareAppMessage | function | ⽤⼾点击右上⻆转发                        |\n| onPageScroll      | function | ⻚⾯滚动触发事件的处理函数                |\n| onResize          | function | ⻚⾯尺⼨改变时触发，详⻅ 响应显⽰区域变化 |\n| onTabItemTap      | function | 当前是 tab ⻚时，点击 tab 时触发          |\n\n### ⻚⾯⽣命周期图解\n\n![](https://pic.downk.cc/item/5faf3f0b1cd1bbb86bcfaf9e.png)","categories":["小程序"]},{"title":"Android自定义绘图","url":"/2020/10/31/android-draw/","content":"\n\n## 完整代码\n\n```Kotlin\nimport android.content.Context\nimport android.graphics.*\nimport android.util.AttributeSet\nimport android.util.Log\nimport android.view.View\nimport androidx.core.content.ContextCompat\nimport androidx.core.graphics.withRotation\nimport androidx.core.graphics.withTranslation\nimport androidx.lifecycle.Lifecycle\nimport androidx.lifecycle.LifecycleObserver\nimport androidx.lifecycle.OnLifecycleEvent\nimport kotlinx.coroutines.*\nimport kotlin.math.PI\nimport kotlin.math.cos\nimport kotlin.math.sin\n\nclass MyView @JvmOverloads constructor(\n    context: Context, attrs: AttributeSet? = null, defStyleAttr: Int = 0\n) : View(context, attrs, defStyleAttr),LifecycleObserver {\n\n\n    private var sineWaveSamplesPath = Path()\n\n    private var rotatingJob : Job? = null\n\n    private var mWidth = 0f\n    private var mHeight = 0f\n    // 画布旋转角度\n    private var mAngle = 10f\n    // 圆的半径\n    private var mRadius = 0f\n    // 画实现的画笔\n    private val solidLinePaint = Paint().apply {\n        style = Paint.Style.STROKE\n        strokeWidth = 2f\n        color = ContextCompat.getColor(context,R.color.colorWhite)\n    }\n    // 画文字\n    private val textPaint = Paint().apply{\n        textSize = 30f\n        typeface = Typeface.DEFAULT_BOLD\n        color = ContextCompat.getColor(context,R.color.colorWhite)\n    }\n\n\n    // 画文字\n    private val textBFPaint = Paint().apply{\n        textSize = 50f\n        typeface = Typeface.DEFAULT_BOLD\n        color = ContextCompat.getColor(context,R.color.colorWhite)\n    }\n\n    // 画虚线\n    private val dashedLinePaint = Paint().apply {\n        style = Paint.Style.STROKE\n        // 线长10f，中断10f\n        pathEffect = DashPathEffect(floatArrayOf(10f,10f),0f)\n        // 线粗细\n        strokeWidth = 2f\n        color = ContextCompat.getColor(context,R.color.colorYellow)\n    }\n    // 画半径\n    private val radiusLinePaint = Paint().apply {\n        style = Paint.Style.STROKE\n        strokeWidth = 5f\n        color = ContextCompat.getColor(context,R.color.colorAccent)\n    }\n    // 画小白点\n    private val filledCirclePaint = Paint().apply {\n        style = Paint.Style.FILL\n        color = ContextCompat.getColor(context,R.color.colorWhite)\n    }\n\n    override fun onSizeChanged(w: Int, h: Int, oldw: Int, oldh: Int) {\n        super.onSizeChanged(w, h, oldw, oldh)\n        Log.d(\"hello\",\"onSizeChanged\")\n        mWidth = w.toFloat()\n        mHeight = h.toFloat()\n        mRadius = if (w<h/2) w/2.toFloat() else h/4.toFloat()\n        mRadius -= 20f\n    }\n\n    override fun onDraw(canvas: Canvas?) {\n        super.onDraw(canvas)\n        canvas?.apply {\n            drawAxises(this)\n            drawLabel(this)\n            drawDashedCircle(this)\n            drawVector(this)\n            drawProjections(this)\n            drawSineWave(this)\n        }\n    }\n    // 画坐标轴\n    private fun drawAxises(canvas:Canvas){\n        // 移动画布位置到中间\n        canvas.withTranslation(mWidth/2,mHeight/2) {\n            drawLine(-mWidth/2,0f,mWidth/2,0f,solidLinePaint)\n            drawLine(0f,-mHeight/2,0f,mHeight/2,solidLinePaint)\n\n        }\n    }\n    // 画虚线圆\n    private fun drawDashedCircle(canvas:Canvas){\n        // 移动到四分之三处\n        canvas.withTranslation(mWidth/2,mHeight/4*3) {\n            drawLine(-mWidth/2,0f,mWidth/2,0f,solidLinePaint)\n            drawCircle(0f,0f,mRadius,dashedLinePaint)\n        }\n    }\n    // 画文字\n    private fun drawLabel(canvas:Canvas){\n        canvas.apply {\n            drawText(\"指数函数与旋转矢量\",50f,mHeight-50f,textPaint)\n        }\n    }\n    // 画矢量半径\n    private fun drawVector(canvas:Canvas){\n        canvas.withTranslation(mWidth/2,mHeight/4*3) {\n            // 旋转画布\n            withRotation(-mAngle) {\n                drawLine(0f,0f,mRadius,0f,radiusLinePaint)\n            }\n        }\n    }\n\n    // 画小白点投影\n    private fun drawProjections(canvas: Canvas){\n        canvas.withTranslation(mWidth/2,mHeight/2) {\n            drawCircle(mRadius * cos(mAngle.toRadians()),0f,10f,filledCirclePaint)\n        }\n        canvas.withTranslation(mWidth/2,mHeight/4*3) {\n            drawCircle(mRadius * cos(mAngle.toRadians()),0f,10f,filledCirclePaint)\n        }\n        canvas.withTranslation(mWidth/2,mHeight/4*3) {\n            val x = mRadius * cos(mAngle.toRadians())\n            val y = mRadius * sin(mAngle.toRadians())\n            withTranslation(x ,-y) {\n                drawLine(0f,0f,0f,y,solidLinePaint)\n                drawLine(0f,0f,0f,-mHeight/4+y,dashedLinePaint)\n            }\n\n        }\n    }\n\n    // 画路径\n    private fun drawSineWave(canvas: Canvas){\n        canvas.withTranslation(mWidth/2,mHeight/2) {\n            val samplesCount = 100\n            val dy = mHeight / 2 /samplesCount\n            sineWaveSamplesPath.reset()\n            sineWaveSamplesPath.moveTo(mRadius * cos(mAngle.toRadians()),0f)\n            repeat(samplesCount){\n                val x = mRadius * cos(it*-0.15+mAngle.toRadians()).toFloat()\n                val y = -dy * it\n                // 沿着路径添加贝塞尔曲线\n                sineWaveSamplesPath.quadTo(x,y,x,y)\n\n            }\n            drawPath(sineWaveSamplesPath,radiusLinePaint)\n        }\n    }\n    // 启动\n    @OnLifecycleEvent(Lifecycle.Event.ON_RESUME)\n    fun startRotating(){\n        rotatingJob = CoroutineScope(Dispatchers.Main).launch {\n            while (true){\n                delay(100)\n                mAngle += 5f\n                invalidate()\n            }\n        }\n    }\n    // 暂停\n    @OnLifecycleEvent(Lifecycle.Event.ON_PAUSE)\n    fun pauseRotating(){\n        rotatingJob?.cancel()\n    }\n\n    // 角度转弧度扩展函数\n    private fun Float.toRadians() = this/180* PI.toFloat()\n}\n```","tags":["自定义View"],"categories":["Android"]},{"title":"Hello World","url":"/2020/10/27/hello-world/","content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n"}]